structures = c("A","C","G","T")
adapter = "GCCTTGCCACACGCTCAG"
barcode = 'NNNNNNNNN'
primer = 'GTTGTAAYTTCTAGRTCCCCTCCTG'
Z = 3
q_Sb = rep(0.25, length(structures))
q_Bb = rep(0.25, length(structures))
gamma = rep(0.33, (length(structures)*(length(structures))))
delta = rep(0.99, sum(nchar(c(adapter,barcode,primer))))
xi_1 = rep(0.2, (Z+2))
xi_2 = rep(0.25, length(structures))
error = 0.01
K = Z+2
reference <- unlist(strsplit(paste(adapter, barcode, primer, sep=""),""))
biallelic_regions = which((unlist(strsplit(reference,"")) %in% c("Y","R")))
N_regions = which((unlist(strsplit(reference,""))) == "N")
IP <- which(reference %in% structures)
l_val = length(biallelic_regions)^2
M <- M[width(M) >= length(reference)+(K-1)]
M
dim(reads)
str(reads)
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
M<-M[1:500]
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
q_Sb <- calc_qSb(M, K, l_val, structures, E, reference)
q_Bb <- calc_qBb(M, K, l_val, structures, E, N_regions)
gamma <- calc_gamma(M, structures, reference, biallelic_regions, gamma, E, K, l_val, IP)
delta <- calc_delta(M, reference, K, l_val, IP, E, biallelic_regions)
xi_1 <- calc_xi1(M, E, K, l_val)
xi_2 <- calc_xi2(E, K, l_val)
current <- E
E
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim
trim <- floor((trim-.5)/4)
trim <- floor((trim-.5)/4)
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- floor((trim-.5)/4)
E
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim-.5
trim <- floor((trim-0.5)/4)
head(trim)
max_E <- apply(E,1,max)
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim
trim-0.5
sapply(trim, -.5)
sapply(trim, -)
sapply(trim, FUN=function(x){x-.5})
trim <- unlist(apply(E,1,FUN=function(x){which(x == max(x))}))
trim <- floor((trim-0.5)/4)
trim
max_E <- apply(E,1,max)
data.table(trim = trim, max_E = max_E
)
a <- readRDS
a <- readRDS("files/trim_lengths.Rds")
a
length(a[trim==0])
length(a[trim==1])
length(a[trim==1]M[4]
M[4]
M[1]
M[498]
M[499]
trim <- unlist(apply(E,1,FUN=function(x){which(x == max(x))}))
trim[498]
trim
trim/4
trim <- floor((trim-0.5)/4)
trim
trim[498]
M[498]
M[499]
trim[499]
M[460]
trim[460]
trim <- unlist(apply(E,1,FUN=function(x){which(x == max(x))}))
trim[498]
max_E[498]
E[498,]
maxE[498,])
max(E[498,])
whichmax(E[498,]))
which(max(E[498,]))
which(E[498,]==max(E[498,]))
trim <- unlist(apply(E,1,FUN=function(x){which(x == max(x))}))
trim[498,]
trim[498]
trim
E
apply(E,1,FUN=function(x){which(x == max(x))})
trim <- unlist(apply(E,1,FUN=function(x){which(x == max(x))}))
trim[498]
apply(E,1,FUN=function(x){which(x == max(x))})[498]
rm(trim)
trim <- unlist(apply(E,1,FUN=function(x){which(x == max(x))}))
trim[498]
trim[498,]
trim[,498]
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim[498]
trim <- apply(trim,1,FUN=function(x){floor((x+0.5)/4)}
max_E <- apply(E,1,max)
return(data.table(trim = trim, max_E = max_E))
}
trim <- apply(trim,1,FUN=function(x){floor((x+0.5)/4)})
trim <- sapply(trim,FUN=function(x){floor((x+0.5)/4)})
trim
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
max_E <- apply(E,1,max)
return(data.table(trim = trim, max_E = max_E))
data.table(trim = trim, max_E = max_E)
delta
gamma
q_Bb
q_Sb
xi_1
xi_2
trim_lengths <- EM_trim_calc(reads[1:200])
trim_lengths
EM_trim_calc <- function(
M = fasta_file,
structures = c("A","C","G","T"),
adapter = "GCCTTGCCACACGCTCAG",
barcode = 'NNNNNNNNN',
primer = 'GTTGTAAYTTCTAGRTCCCCTCCTG',
Z = 3,
q_Sb = rep(0.25, length(structures)),
q_Bb = rep(0.25, length(structures)),
gamma = rep(0.33, (length(structures)*(length(structures)))),
delta = rep(0.99, sum(nchar(c(adapter,barcode,primer)))),
xi_1 = rep(0.2, (Z+2)),
xi_2 = rep(0.25, length(structures)),
error = 0.01
){
K = Z+2
reference <- unlist(strsplit(paste(adapter, barcode, primer, sep=""),""))
biallelic_regions = which((unlist(strsplit(reference,"")) %in% c("Y","R")))
N_regions = which((unlist(strsplit(reference,""))) == "N")
IP <- which(reference %in% structures)
l_val = length(biallelic_regions)^2
M <- M[width(M) >= length(reference)+(K-1)]
test <- function(x,y){
return(((x-y)/(x+(error/1000))) <= error)}
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
while(any(mapply(test, current, previous) == FALSE)){
previous <- E
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
q_Sb <- calc_qSb(M, K, l_val, structures, E, reference)
q_Bb <- calc_qBb(M, K, l_val, structures, E, N_regions)
gamma <- calc_gamma(M, structures, reference, biallelic_regions, gamma, E, K, l_val, IP)
delta <- calc_delta(M, reference, K, l_val, IP, E, biallelic_regions)
xi_1 <- calc_xi1(M, E, K, l_val)
xi_2 <- calc_xi2(E, K, l_val)
current <- E
loop <- loop+1
print(paste(loop, " iterations completed", sep=""))
}
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
max_E <- apply(E,1,max)
return(list(data.table(trim = trim, max_E = max_E), q_Sb, q_Bb, gamma, delta)
}
EM_trim_calc <- function(
M = fasta_file,
structures = c("A","C","G","T"),
adapter = "GCCTTGCCACACGCTCAG",
barcode = 'NNNNNNNNN',
primer = 'GTTGTAAYTTCTAGRTCCCCTCCTG',
Z = 3,
q_Sb = rep(0.25, length(structures)),
q_Bb = rep(0.25, length(structures)),
gamma = rep(0.33, (length(structures)*(length(structures)))),
delta = rep(0.99, sum(nchar(c(adapter,barcode,primer)))),
xi_1 = rep(0.2, (Z+2)),
xi_2 = rep(0.25, length(structures)),
error = 0.01
){
K = Z+2
reference <- unlist(strsplit(paste(adapter, barcode, primer, sep=""),""))
biallelic_regions = which((unlist(strsplit(reference,"")) %in% c("Y","R")))
N_regions = which((unlist(strsplit(reference,""))) == "N")
IP <- which(reference %in% structures)
l_val = length(biallelic_regions)^2
M <- M[width(M) >= length(reference)+(K-1)]
test <- function(x,y){
return(((x-y)/(x+(error/1000))) <= error)}
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
while(any(mapply(test, current, previous) == FALSE)){
previous <- E
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
q_Sb <- calc_qSb(M, K, l_val, structures, E, reference)
q_Bb <- calc_qBb(M, K, l_val, structures, E, N_regions)
gamma <- calc_gamma(M, structures, reference, biallelic_regions, gamma, E, K, l_val, IP)
delta <- calc_delta(M, reference, K, l_val, IP, E, biallelic_regions)
xi_1 <- calc_xi1(M, E, K, l_val)
xi_2 <- calc_xi2(E, K, l_val)
current <- E
loop <- loop+1
print(paste(loop, " iterations completed", sep=""))
}
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
max_E <- apply(E,1,max)
return(list(data.table(trim = trim, max_E = max_E), q_Sb, q_Bb, gamma, delta))
}
trim_lengths <- EM_trim_calc(reads[1:100])
trim_lengths
EM_trim_calc <- function(
M = fasta_file,
structures = c("A","C","G","T"),
adapter = "GCCTTGCCACACGCTCAG",
barcode = 'NNNNNNNNN',
primer = 'GTTGTAAYTTCTAGRTCCCCTCCTG',
Z = 3,
q_Sb = rep(0.25, length(structures)),
q_Bb = rep(0.25, length(structures)),
gamma = rep(0.33, (length(structures)*(length(structures)))),
delta = rep(0.99, sum(nchar(c(adapter,barcode,primer)))),
xi_1 = rep(0.2, (Z+2)),
xi_2 = rep(0.25, length(structures)),
error = 0.01
){
K = Z+2
reference <- unlist(strsplit(paste(adapter, barcode, primer, sep=""),""))
biallelic_regions = which((unlist(strsplit(reference,"")) %in% c("Y","R")))
N_regions = which((unlist(strsplit(reference,""))) == "N")
IP <- which(reference %in% structures)
l_val = length(biallelic_regions)^2
M <- M[width(M) >= length(reference)+(K-1)]
test <- function(x,y){
return(((x-y)/(x+(error/1000))) <= error)}
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
while(any(mapply(test, current, previous) == FALSE)){
previous <- E
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
q_Sb <- calc_qSb(M, K, l_val, structures, E, reference)
q_Bb <- calc_qBb(M, K, l_val, structures, E, N_regions)
gamma <- calc_gamma(M, structures, reference, biallelic_regions, gamma, E, K, l_val, IP)
delta <- calc_delta(M, reference, K, l_val, IP, E, biallelic_regions)
xi_1 <- calc_xi1(M, E, K, l_val)
xi_2 <- calc_xi2(E, K, l_val)
current <- E
loop <- loop+1
print(paste(loop, " iterations completed", sep=""))
}
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
max_E <- apply(E,1,max)
return(list(data.table(trim = trim, max_E = max_E), data.table( q_Sb = q_Sb, q_Bb = q_Bb), gamma = gamma, delta = delta))
}
trim_lengths <- EM_trim_calc(reads[1:100])
trim_lengths
trim_lengths$gamma
trim_lengths$delta
trim_lengths
reads <- "files/SRR2241783_2.fasta"
trim_lengths <- data.table(read = names(readBStringSet(fasta_file)))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# setwd("~/Dropbox/Classes/BCB_II/BCB_II_HW_5/")
# setwd("c:/Users/Schuyler/Dropbox/Classes/BCB_II/BCB_II_HW_5/")
sapply(list.files("functions",pattern="*.R", full.name =TRUE),source,.GlobalEnv)
trim_lengths <- data.table(read = names(readBStringSet(fasta_file)))
reads <- "files/SRR2241783_2.fasta"
trim_lengths <- data.table(read = names(readBStringSet(fasta_file)))
fasta_file <- "files/SRR2241783_2.fasta"
trim_lengths <- data.table(read = names(readBStringSet(fasta_file)))
trim_lengths
a <- readRDS("files/trim_lengths.Rds")
a
structures = c("A","C","G","T")
adapter = "GCCTTGCCACACGCTCAG"
barcode = 'NNNNNNNNN'
primer = 'GTTGTAAYTTCTAGRTCCCCTCCTG'
Z = 3
q_Sb = rep(0.25, length(structures))
q_Bb = rep(0.25, length(structures))
gamma = rep(0.33, (length(structures)*(length(structures))))
delta = rep(0.99, sum(nchar(c(adapter,barcode,primer))))
xi_1 = rep(0.2, (Z+2))
xi_2 = rep(0.25, length(structures))
error = 0.01
K = Z+2
reference <- unlist(strsplit(paste(adapter, barcode, primer, sep=""),""))
biallelic_regions = which((unlist(strsplit(reference,"")) %in% c("Y","R")))
N_regions = which((unlist(strsplit(reference,""))) == "N")
IP <- which(reference %in% structures)
l_val = length(biallelic_regions)^2
trim_lengths <- data.table(read = names(readBStringSet(fasta_file)))
M
fasta_file
M <- fasta_file
trim_lengths <- data.table(read = names(readBStringSet(M)))
test <- function(x,y){
return(((x-y)/(x+(error/1000))) <= error)}
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
previous <- E
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
q_Sb <- calc_qSb(M, K, l_val, structures, E, reference)
trim_lengths <- data.table(read = names(readBStringSet(M)))
reads <- paste(readBStringSet(M))
trim_lengths
reads
trim_lengths <- data.table(read = names(readBStringSet(M)))
length(trim_lengths)
length(trim_lengths[[1]])
trim_lengths[, trim := rep(0, length(trim_lengths[[1]]))]
trim_lengths
reads <- paste(readBStringSet(M))
reads <- reads[width(reads)]
reads <- paste(readBStringSet(M))
reads <- reads[width(reads) >= length(reference)+(K-1)]
reads <- reads[width(paste(readBStringSet(M))) >= length(reference)+(K-1)]
reads <- width(paste(readBStringSet(M))) >= length(reference)+(K-1)
which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))
trim_lengths[1,]
trim_lengths[trim]
trim_lengths[1]
trim_lengths[c(1,2)]
trim_lengths[c(1,2)][[2]]
trim_lengths[c(1,2)][[2]] <- 1
trim_lengths[c(1,2)][[2]]
trim_lengths[c(1,2)][[2]] <- 0
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]])), k = rep(4, length(trim_lengths[[1]]))]
reads <- width(paste(readBStringSet(M))) >= length(reference)+(K-1)
M <- width(paste(readBStringSet(M))) >= length(reference)+(K-1)
test <- function(x,y){
return(((x-y)/(x+(error/1000))) <= error)}
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
previous <- E
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# setwd("~/Dropbox/Classes/BCB_II/BCB_II_HW_5/")
# setwd("c:/Users/Schuyler/Dropbox/Classes/BCB_II/BCB_II_HW_5/")
sapply(list.files("functions",pattern="*.R", full.name =TRUE),source,.GlobalEnv)
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
M
M <- paste(readBStringSet(M))[width(paste(readBStringSet(M))) >= length(reference)+(K-1)]
M = fasta_file
M <- paste(readBStringSet(M))[width(paste(readBStringSet(M))) >= length(reference)+(K-1)]
M
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
M = fasta_file
M <- readBStringSet(M))[200]
M <- readBStringSet(M)[200]
M
M = fasta_file
M <- readBStringSet(M)[200]
M = fasta_file
M <- readBStringSet(M)[1:200]
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths <- data.table(read = names((M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]])), k = rep(4, length(trim_lengths[[1]]))]
M <- paste((M))[width(paste((M))) >= length(reference)+(K-1)]
trim_lengths
M
previous <- E
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
q_Sb <- calc_qSb(M, K, l_val, structures, E, reference)
q_Bb <- calc_qBb(M, K, l_val, structures, E, N_regions)
gamma <- calc_gamma(M, structures, reference, biallelic_regions, gamma, E, K, l_val, IP)
delta <- calc_delta(M, reference, K, l_val, IP, E, biallelic_regions)
xi_1 <- calc_xi1(M, E, K, l_val)
xi_2 <- calc_xi2(E, K, l_val)
current <- E
loop <- loop+1
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim
E
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
E
E <- matrix(0,length(M),((K-1)*l_val)+1)
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
a
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
E <- calc_E(M =M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
E
M
reference
K
l_val
q_Sb
q_Bb
gamma
delta
q_Sb = rep(0.25, length(structures))
q_Bb = rep(0.25, length(structures))
gamma = rep(0.33, (length(structures)*(length(structures))))
delta = rep(0.99, sum(nchar(c(adapter,barcode,primer))))
xi_1 = rep(0.2, (Z+2))
xi_2 = rep(0.25, length(structures))
E <- matrix(0,length(M),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
E <- calc_E(M = M, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
E
q_Sb <- calc_qSb(M, K, l_val, structures, E, reference)
q_Bb <- calc_qBb(M, K, l_val, structures, E, N_regions)
gamma <- calc_gamma(M, structures, reference, biallelic_regions, gamma, E, K, l_val, IP)
delta <- calc_delta(M, reference, K, l_val, IP, E, biallelic_regions)
xi_1 <- calc_xi1(M, E, K, l_val)
xi_2 <- calc_xi2(E, K, l_val)
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
trim
max_E <- apply(E,1,max)
trim_lengths
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[2]] <- (trim + length(reference))
M = fasta_file
trim_lengths[which(width(paste(readBStringSet(M)))[1:200] >= length(reference)+(K-1))][[2]] <- (trim + length(reference))
trim_lengths
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]])), k = rep(4, length(trim_lengths[[1]]))]
EM_reads <- paste(readBStringSet(M))[width(paste(readBStringSet(M))) >= length(reference)+(K-1)]
test <- function(x,y){
return(((x-y)/(x+(error/1000))) <= error)}
E <- matrix(0,length(EM_reads),((K-1)*l_val)+1)
current <- 10
previous <- 1
loop <- 0
previous <- E
E <- calc_E(M = EM_reads, reference, K, l_val, q_Sb, q_Bb, gamma, delta, xi_1, xi_2, structures, IP)
E
q_Sb <- calc_qSb(EM_reads, K, l_val, structures, E, reference)
q_Bb <- calc_qBb(EM_reads, K, l_val, structures, E, N_regions)
gamma <- calc_gamma(EM_reads, structures, reference, biallelic_regions, gamma, E, K, l_val, IP)
delta <- calc_delta(EM_reads, reference, K, l_val, IP, E, biallelic_regions)
xi_1 <- calc_xi1(EM_reads, E, K, l_val)
xi_2 <- calc_xi2(E, K, l_val)
current <- E
loop <- loop+1
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
max_E <- apply(E,1,max)
trim
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[2]] <- (trim + length(reference))
trim_lengths
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[3]] <- trim
trim_lengths
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]])), k := rep(4, length(trim_lengths[[1]]))]
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]])), k := rep(4, length(trim_lengths[[1]]))]
M
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]])), k := rep(4, length(trim_lengths[[1]]))]
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]]))]
trim_lengths[, k := rep(4, length(trim_lengths[[1]]))]
EM_reads <- paste(readBStringSet(M))[width(paste(readBStringSet(M))) >= length(reference)+(K-1)]
trim_lengths
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
max_E <- apply(E,1,max)
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[2]] <- (trim + length(reference))
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[3]] <- trim
trim_lengths
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim[61710]
E
trim
length(EM_reads)
trim[36716]
EM_reads[36716]
trim_lengths
trim_lengths[k == 4][[2]] <- 0
trim_lengths
list(trim_lengths[ , trim := trim, max_E := max_E], q = data.table( q_Sb = q_Sb, q_Bb = q_Bb), gamma = gamma, delta = delta)
E
trim_lengths <- data.table(read = names(readBStringSet(M)))
trim_lengths[, trim := rep(0, length(trim_lengths[[1]]))]
trim_lengths[, k := rep(4, length(trim_lengths[[1]]))]
trim_lengths[, E := rep(1, length(trim_lengths[[1]]))]
trim_lengths
trim <- apply(E,1,FUN=function(x){which(x == max(x))})
trim <- sapply(trim,FUN=function(x){floor((x-0.5)/4)})
max_E <- apply(E,1,max)
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[2]] <- (trim + length(reference))
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[3]] <- trim
trim_lengths[which(width(paste(readBStringSet(M))) >= length(reference)+(K-1))][[4]] <- max_E
trim_lengths[k == 4][[2]] <- 0
trim_lengths
